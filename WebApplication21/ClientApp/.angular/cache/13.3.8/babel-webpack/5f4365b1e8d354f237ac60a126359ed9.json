{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, Injectable, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\nconst _c0 = [\"txDocumentEditorContainer\"];\n\nconst _c1 = function (a0, a1) {\n  return {\n    \"width\": a0,\n    \"height\": a1,\n    \"display\": \"inline-block\"\n  };\n};\n\nlet DocumentEditorComponent = /*#__PURE__*/(() => {\n  class DocumentEditorComponent {\n    constructor(hostElement, http) {\n      this.hostElement = hostElement;\n      this.http = http;\n      this.editMode = 'Edit';\n      this.contextMenusEnabled = true;\n      this.formattingPrinter = '';\n      this.culture = '';\n      this.uiCulture = '';\n      this.userNames = [];\n      this.reconnectTimeout = 0;\n      this.customQueryParams = {};\n    }\n\n    ngOnInit() {\n      // Remove confidential information before rendering the page\n      this.hostElement.nativeElement.removeAttribute(\"oauthClientID\");\n      this.hostElement.nativeElement.removeAttribute(\"oauthClientSecret\");\n\n      if (!this.serviceURL.toLowerCase().startsWith('http://') && !this.serviceURL.toLowerCase().startsWith('https://')) {\n        throw new Error(`Invalid service URL ${this.serviceURL}`);\n      }\n    }\n\n    ngAfterViewInit() {\n      this.init();\n    }\n\n    init() {\n      // Dynamically add necessary script to dom\n      let elemScript = document.createElement('script');\n      elemScript.src = `${this.serviceURL}/documenteditor/JS/ds-server-document-editor.js`;\n      elemScript.addEventListener(\"load\", () => {\n        // Fire \"editor loaded\" event (TXTextControl object exists from now on)\n        var evt = new CustomEvent(\"dsDocumentEditorLoaded\", {\n          detail: {\n            /* Empty event argument */\n          }\n        });\n        document.dispatchEvent(evt); // Initialize editor\n\n        let settings = {\n          containerID: 'txDocumentEditorContainer',\n          serviceURL: this.serviceURL,\n          editorSettings: {\n            culture: this.culture,\n            uiCulture: this.uiCulture,\n            editMode: DocumentEditorComponent.editModeFromString(this.editMode),\n            contextMenusEnabled: this.contextMenusEnabled,\n            formattingPrinter: this.formattingPrinter,\n            reconnectTimeout: this.reconnectTimeout,\n            userNames: this.userNames,\n            customQueryParams: this.customQueryParams\n          }\n        };\n\n        if (this.accessToken) {\n          settings.authSettings = {\n            accessToken: this.accessToken\n          };\n        } else if (this.oauthClientID) {\n          settings.authSettings = {\n            clientId: this.oauthClientID,\n            clientSecret: this.oauthClientSecret\n          };\n        }\n\n        TXTextControl.init(settings);\n\n        if (this.documentData) {\n          TXTextControl.addEventListener('textControlLoaded', () => {\n            let streamType = DocumentEditorComponent.streamTypeFromDocumentFileFormat(this.documentFileFormat);\n            TXTextControl.loadDocument(streamType, this.documentData);\n          });\n        }\n\n        if (this.jsonData) {\n          TXTextControl.addEventListener('ribbonTabsLoaded', () => {\n            TXTextControl.loadJsonData(this.jsonData);\n          });\n        }\n      });\n      this.containerDiv.nativeElement.appendChild(elemScript);\n    }\n\n    static editModeFromString(value) {\n      switch (value) {\n        case 'Edit':\n          return 1;\n\n        case 'ReadAndSelect':\n          return 2;\n\n        case 'ReadOnly':\n          return 3;\n\n        case 'UsePassword':\n          return 2048;\n      }\n\n      return 1; // EditMode.Edit\n    }\n\n    static streamTypeFromDocumentFileFormat(value) {\n      switch (value.trim().toUpperCase()) {\n        case 'HTML':\n          return 4;\n        // StreamType.HTMLFormat\n\n        case 'RTF':\n          return 8;\n        // StreamType.RichTextFormat\n\n        case 'TXT':\n          return 16;\n        // StreamType.PlainText\n\n        case 'TX':\n          return 32;\n        // StreamType.InternalUnicodeFormat\n\n        case 'DOC':\n          return 64;\n        // StreamType.MSWord\n\n        case 'PDF':\n          return 512;\n        // StreamType.AdobePDF\n\n        case 'DOCX':\n          return 1024;\n        // StreamType.WordprocessingML\n\n        case 'XLSX':\n          return 4096;\n        // StreamType.SpreadsheetML\n      }\n\n      return 4; // StreamType.HTMLFormat\n    }\n\n  }\n\n  DocumentEditorComponent.ɵfac = function DocumentEditorComponent_Factory(t) {\n    return new (t || DocumentEditorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n\n  DocumentEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DocumentEditorComponent,\n    selectors: [[\"tx-ds-document-editor\"]],\n    viewQuery: function DocumentEditorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerDiv = _t.first);\n      }\n    },\n    inputs: {\n      width: \"width\",\n      height: \"height\",\n      documentData: \"documentData\",\n      documentFileFormat: \"documentFileFormat\",\n      jsonData: \"jsonData\",\n      serviceURL: \"serviceURL\",\n      editMode: \"editMode\",\n      contextMenusEnabled: \"contextMenusEnabled\",\n      formattingPrinter: \"formattingPrinter\",\n      culture: \"culture\",\n      uiCulture: \"uiCulture\",\n      userNames: \"userNames\",\n      reconnectTimeout: \"reconnectTimeout\",\n      oauthClientID: \"oauthClientID\",\n      oauthClientSecret: \"oauthClientSecret\",\n      accessToken: \"accessToken\",\n      customQueryParams: \"customQueryParams\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[\"id\", \"txDocumentEditorContainer\", 3, \"ngStyle\"], [\"txDocumentEditorContainer\", \"\"]],\n    template: function DocumentEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(1, _c1, ctx.width, ctx.height));\n      }\n    },\n    directives: [i2.NgStyle],\n    styles: [\"\"]\n  });\n  DocumentEditorComponent.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DocumentEditorComponent,\n    factory: DocumentEditorComponent.ɵfac\n  });\n  return DocumentEditorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DocumentEditorModule = /*#__PURE__*/(() => {\n  class DocumentEditorModule {}\n\n  DocumentEditorModule.ɵfac = function DocumentEditorModule_Factory(t) {\n    return new (t || DocumentEditorModule)();\n  };\n\n  DocumentEditorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: DocumentEditorModule\n  });\n  DocumentEditorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, HttpClientModule]]\n  });\n  return DocumentEditorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of tx-ng-ds-document-editor\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DocumentEditorComponent, DocumentEditorModule }; //# sourceMappingURL=txtextcontrol-tx-ng-ds-document-editor.mjs.map","map":null,"metadata":{},"sourceType":"module"}